/// <reference types="bun-types" />
import type { Errorlike, Server, ServerWebSocket } from "bun";
import { Context, WebSocketContext } from "./context";
export declare class Bao {
    #private;
    /**
     * Default error handler
     *
     * @param error The error that is thrown
     * @returns A response to be sent upon an error being thrown
     */
    errorHandler: (error: Errorlike) => Response | Promise<Response> | undefined | Promise<undefined>;
    /**
     * Default not found handler
     *
     * @returns The response for when a route is not found
     */
    notFoundHandler: (ctx: Context) => Response | Promise<Response>;
    /**
     * Middleware to be run before the path handler
     *
     * @param fn The middleware function to be run before the path handler
     */
    before(fn: IHandler): void;
    /**
     * Middleware to be run after the path handler
     *
     * @param fn The middleware function to be run after the path handler
     */
    after(fn: IHandler): void;
    /**
     * Creates a route for any HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    any(path: string, handler: IHandler): void;
    /**
     * Creates a route for the GET HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    get(path: string, handler: IHandler): void;
    /**
     * Creates a route for the POST HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    post(path: string, handler: IHandler): void;
    /**
     * Creates a route for the PUT HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    put(path: string, handler: IHandler): void;
    /**
     * Creates a route for the DELETE HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    delete(path: string, handler: IHandler): void;
    /**
     * Creates a route for the PATCH HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    patch(path: string, handler: IHandler): void;
    /**
     * Creates a route a WebSocket connection
     *
     * @param path The path of the route
     * @param handlers The handler function for the WebSocket connection
     */
    ws(path: string, handlers: IWebSocketHandlers): void;
    /**
     * Start the server on the specified port
     *
     * @param options The options for the server
     * @returns A Bun Server object
     */
    listen(options?: IListen): Server;
}
interface IListen {
    port?: number;
    hostname?: string;
    development?: boolean;
}
export interface IHandler {
    (ctx: Context): Context | Promise<Context>;
}
export interface IWebSocketHandlers {
    open?: (ws: ServerWebSocket<IWebSocketData>) => Promise<void> | void;
    close?: (ws: ServerWebSocket<IWebSocketData>) => Promise<void> | void;
    message?: (ws: ServerWebSocket<IWebSocketData>, msg: string | Uint8Array) => Promise<void> | void;
    /**
     * Runs as middleware before the connection upgrade
     *
     * @param ctx The Context from the route handler
     * @returns The final Context object before the upgrade
     */
    upgrade?(ctx: Context): Promise<Context> | Context;
}
export interface IWebSocketData {
    [key: string]: any;
    ctx: WebSocketContext;
}
export {};
