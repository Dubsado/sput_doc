import { Context } from "./context";
import { MiddlewarePosition } from "./middleware";
import { Router } from "./router";
export class Bao {
    #router = new Router();
    /**
     * Default error handler
     *
     * @param error The error that is thrown
     * @returns A response to be sent upon an error being thrown
     */
    errorHandler = (error) => {
        console.error(error);
        return new Response("An error occurred! Please check the server logs.", {
            status: 500,
        });
    };
    /**
     * Default not found handler
     *
     * @returns The response for when a route is not found
     */
    notFoundHandler = (ctx) => {
        return new Response("404 Not Found", {
            status: 404,
        });
    };
    /**
     * Middleware to be run before the path handler
     *
     * @param fn The middleware function to be run before the path handler
     */
    before(fn) {
        this.#router.middleware.register(fn, MiddlewarePosition.Before);
    }
    /**
     * Middleware to be run after the path handler
     *
     * @param fn The middleware function to be run after the path handler
     */
    after(fn) {
        this.#router.middleware.register(fn, MiddlewarePosition.After);
    }
    // HTTP methods
    /**
     * Creates a route for any HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    any(path, handler) {
        this.#handleMethod("ANY", path, handler);
    }
    /**
     * Creates a route for the GET HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    get(path, handler) {
        this.#handleMethod("GET", path, handler);
    }
    /**
     * Creates a route for the POST HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    post(path, handler) {
        this.#handleMethod("POST", path, handler);
    }
    /**
     * Creates a route for the PUT HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    put(path, handler) {
        this.#handleMethod("PUT", path, handler);
    }
    /**
     * Creates a route for the DELETE HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    delete(path, handler) {
        this.#handleMethod("DELETE", path, handler);
    }
    /**
     * Creates a route for the PATCH HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    patch(path, handler) {
        this.#handleMethod("PATCH", path, handler);
    }
    // Handle the HTTP methods
    #handleMethod(method, path, handler) {
        this.#router.register(method, path, handler);
    }
    /**
     * Creates a route a WebSocket connection
     *
     * @param path The path of the route
     * @param handlers The handler function for the WebSocket connection
     */
    ws(path, handlers) {
        this.#router.registerWebSocket(path, handlers);
    }
    /**
     * Start the server on the specified port
     *
     * @param options The options for the server
     * @returns A Bun Server object
     */
    listen(options = {}) {
        return Bun.serve(this.#serve(options));
    }
    #serve(listen) {
        let router = this.#router;
        let errorHandler = this.errorHandler;
        let notFoundHandler = this.notFoundHandler;
        return {
            websocket: {
                open: (ws) => router.handleWebSocket(ws).open(),
                close: (ws) => router.handleWebSocket(ws).close(),
                message: (ws, msg) => router.handleWebSocket(ws).message(msg),
            },
            async fetch(req, server) {
                let ctx = new Context(req, server);
                const res = await router.handle(ctx);
                return res.status === 404 ? notFoundHandler(ctx) : res;
            },
            error(error) {
                return errorHandler(error);
            },
            port: listen.port || 3000,
            development: listen.development || false,
            hostname: listen.hostname || "0.0.0.0",
        };
    }
}
//# sourceMappingURL=bao.js.map